// SPDX-License-Identifier: ISC
/* Copyright (C) 2020 Felix Fietkau <nbd@nbd.name> */
#ifndef MTK_VENDOR_H
#define MTK_VENDOR_H

#define OUI_MTK    0x000ce7

enum mtk_nl80211_vendor_subcmds {
	MTK_NL80211_VENDOR_SUBCMD_AMNT_CTRL = 0xae,
	MTK_NL80211_VENDOR_SUBCMD_CSI_CTRL = 0xc2,
	MTK_NL80211_VENDOR_SUBCMD_RFEATURE_CTRL = 0xc3,
	MTK_NL80211_VENDOR_SUBCMD_WIRELESS_CTRL = 0xc4,
	MTK_NL80211_VENDOR_SUBCMD_MU_CTRL = 0xc5,
	MTK_NL80211_VENDOR_SUBCMD_PHY_CAPA_CTRL= 0xc6,
	MTK_NL80211_VENDOR_SUBCMD_EDCCA_CTRL = 0xc7,
	MTK_NL80211_VENDOR_SUBCMD_3WIRE_CTRL = 0xc8,
	MTK_NL80211_VENDOR_SUBCMD_IBF_CTRL = 0xc9,
	MTK_NL80211_VENDOR_SUBCMD_BSS_COLOR_CTRL = 0xca,
	MTK_NL80211_VENDOR_SUBCMD_BACKGROUND_RADAR_CTRL = 0xcb,
	MTK_NL80211_VENDOR_SUBCMD_PP_CTRL = 0xcc,
	MTK_NL80211_VENDOR_SUBCMD_BEACON_CTRL = 0xcd,
};

enum mtk_vendor_attr_edcca_ctrl {
	MTK_VENDOR_ATTR_EDCCA_THRESHOLD_INVALID = 0,

	MTK_VENDOR_ATTR_EDCCA_CTRL_MODE,
	MTK_VENDOR_ATTR_EDCCA_CTRL_PRI20_VAL,
	MTK_VENDOR_ATTR_EDCCA_CTRL_SEC20_VAL,
	MTK_VENDOR_ATTR_EDCCA_CTRL_SEC40_VAL,
	MTK_VENDOR_ATTR_EDCCA_CTRL_SEC80_VAL,
	MTK_VENDOR_ATTR_EDCCA_CTRL_COMPENSATE,
	MTK_VENDOR_ATTR_EDCCA_CTRL_SEC160_VAL,

	/* keep last */
	NUM_MTK_VENDOR_ATTRS_EDCCA_CTRL,
	MTK_VENDOR_ATTR_EDCCA_CTRL_MAX =
		NUM_MTK_VENDOR_ATTRS_EDCCA_CTRL - 1
};

enum mtk_vendor_attr_edcca_dump {
	MTK_VENDOR_ATTR_EDCCA_DUMP_UNSPEC = 0,

	MTK_VENDOR_ATTR_EDCCA_DUMP_MODE,
	MTK_VENDOR_ATTR_EDCCA_DUMP_PRI20_VAL,
	MTK_VENDOR_ATTR_EDCCA_DUMP_SEC40_VAL,
	MTK_VENDOR_ATTR_EDCCA_DUMP_SEC80_VAL,
	MTK_VENDOR_ATTR_EDCCA_DUMP_SEC160_VAL,

	/* keep last */
	NUM_MTK_VENDOR_ATTRS_EDCCA_DUMP,
	MTK_VENDOR_ATTR_EDCCA_DUMP_MAX =
		NUM_MTK_VENDOR_ATTRS_EDCCA_DUMP - 1
};

enum mtk_vendor_attr_3wire_ctrl {
	MTK_VENDOR_ATTR_3WIRE_CTRL_UNSPEC,

	MTK_VENDOR_ATTR_3WIRE_CTRL_MODE,

	/* keep last */
	NUM_MTK_VENDOR_ATTRS_3WIRE_CTRL,
	MTK_VENDOR_ATTR_3WIRE_CTRL_MAX =
		NUM_MTK_VENDOR_ATTRS_3WIRE_CTRL - 1
};

enum mtk_vendor_attr_csi_ctrl {
	MTK_VENDOR_ATTR_CSI_CTRL_UNSPEC,

	MTK_VENDOR_ATTR_CSI_CTRL_CFG,
	MTK_VENDOR_ATTR_CSI_CTRL_CFG_MODE,
	MTK_VENDOR_ATTR_CSI_CTRL_CFG_TYPE,
	MTK_VENDOR_ATTR_CSI_CTRL_CFG_VAL1,
	MTK_VENDOR_ATTR_CSI_CTRL_CFG_VAL2,
	MTK_VENDOR_ATTR_CSI_CTRL_MAC_ADDR,

	MTK_VENDOR_ATTR_CSI_CTRL_DUMP_NUM,

	MTK_VENDOR_ATTR_CSI_CTRL_DATA,

        MTK_VENDOR_ATTR_CSI_CTRL_BAND_IDX,

	/* keep last */
	NUM_MTK_VENDOR_ATTRS_CSI_CTRL,
	MTK_VENDOR_ATTR_CSI_CTRL_MAX =
		NUM_MTK_VENDOR_ATTRS_CSI_CTRL - 1
};

enum mtk_vendor_attr_csi_data {
	MTK_VENDOR_ATTR_CSI_DATA_UNSPEC,
	MTK_VENDOR_ATTR_CSI_DATA_PAD,

	MTK_VENDOR_ATTR_CSI_DATA_VER,
	MTK_VENDOR_ATTR_CSI_DATA_TS,
	MTK_VENDOR_ATTR_CSI_DATA_RSSI,
	MTK_VENDOR_ATTR_CSI_DATA_SNR,
	MTK_VENDOR_ATTR_CSI_DATA_BW,
	MTK_VENDOR_ATTR_CSI_DATA_CH_IDX,
	MTK_VENDOR_ATTR_CSI_DATA_TA,
	MTK_VENDOR_ATTR_CSI_DATA_NUM,
	MTK_VENDOR_ATTR_CSI_DATA_I,
	MTK_VENDOR_ATTR_CSI_DATA_Q,
	MTK_VENDOR_ATTR_CSI_DATA_INFO,
	MTK_VENDOR_ATTR_CSI_DATA_RSVD1,
	MTK_VENDOR_ATTR_CSI_DATA_RSVD2,
	MTK_VENDOR_ATTR_CSI_DATA_RSVD3,
	MTK_VENDOR_ATTR_CSI_DATA_RSVD4,
	MTK_VENDOR_ATTR_CSI_DATA_TX_ANT,
	MTK_VENDOR_ATTR_CSI_DATA_RX_ANT,
	MTK_VENDOR_ATTR_CSI_DATA_MODE,
	MTK_VENDOR_ATTR_CSI_DATA_CHAIN_INFO,

	/* keep last */
	NUM_MTK_VENDOR_ATTRS_CSI_DATA,
	MTK_VENDOR_ATTR_CSI_DATA_MAX =
		NUM_MTK_VENDOR_ATTRS_CSI_DATA - 1
};

enum mtk_vendor_attr_mnt_ctrl {
	MTK_VENDOR_ATTR_AMNT_CTRL_UNSPEC,

	MTK_VENDOR_ATTR_AMNT_CTRL_SET,
	MTK_VENDOR_ATTR_AMNT_CTRL_DUMP,
	/* keep last */
	NUM_MTK_VENDOR_ATTRS_AMNT_CTRL,
	MTK_VENDOR_ATTR_AMNT_CTRL_MAX =
		NUM_MTK_VENDOR_ATTRS_AMNT_CTRL - 1
};

enum mtk_vendor_attr_mnt_set {
	MTK_VENDOR_ATTR_AMNT_SET_UNSPEC,

	MTK_VENDOR_ATTR_AMNT_SET_INDEX,
	MTK_VENDOR_ATTR_AMNT_SET_MACADDR,

	/* keep last */
	NUM_MTK_VENDOR_ATTRS_AMNT_SET,
	MTK_VENDOR_ATTR_AMNT_SET_MAX =
		NUM_MTK_VENDOR_ATTRS_AMNT_SET - 1
};

enum mtk_vendor_attr_mnt_dump {
	MTK_VENDOR_ATTR_AMNT_DUMP_UNSPEC,

	MTK_VENDOR_ATTR_AMNT_DUMP_INDEX,
	MTK_VENDOR_ATTR_AMNT_DUMP_LEN,
	MTK_VENDOR_ATTR_AMNT_DUMP_RESULT,

	/* keep last */
	NUM_MTK_VENDOR_ATTRS_AMNT_DUMP,
	MTK_VENDOR_ATTR_AMNT_DUMP_MAX =
		NUM_MTK_VENDOR_ATTRS_AMNT_DUMP - 1
};

enum mtk_vendor_attr_wireless_ctrl {
	MTK_VENDOR_ATTR_WIRELESS_CTRL_UNSPEC,

	MTK_VENDOR_ATTR_WIRELESS_CTRL_FIXED_MCS,
	MTK_VENDOR_ATTR_WIRELESS_CTRL_FIXED_OFDMA,
	MTK_VENDOR_ATTR_WIRELESS_CTRL_PPDU_TX_TYPE,
	MTK_VENDOR_ATTR_WIRELESS_CTRL_NUSERS_OFDMA,
	MTK_VENDOR_ATTR_WIRELESS_CTRL_BA_BUFFER_SIZE,
	MTK_VENDOR_ATTR_WIRELESS_CTRL_MIMO,
	MTK_VENDOR_ATTR_WIRELESS_CTRL_AMSDU,
	MTK_VENDOR_ATTR_WIRELESS_CTRL_CERT = 9,
	MTK_VENDOR_ATTR_WIRELESS_CTRL_RTS_SIGTA,

	/* keep last */
	NUM_MTK_VENDOR_ATTRS_WIRELESS_CTRL,
	MTK_VENDOR_ATTR_WIRELESS_CTRL_MAX =
		NUM_MTK_VENDOR_ATTRS_WIRELESS_CTRL - 1
};

enum mtk_vendor_attr_wireless_dump {
	MTK_VENDOR_ATTR_WIRELESS_DUMP_UNSPEC,

	MTK_VENDOR_ATTR_WIRELESS_DUMP_AMSDU,

	/* keep last */
	NUM_MTK_VENDOR_ATTRS_WIRELESS_DUMP,
	MTK_VENDOR_ATTR_WIRELESS_DUMP_MAX =
		NUM_MTK_VENDOR_ATTRS_WIRELESS_DUMP - 1
};

enum mtk_vendor_attr_rfeature_ctrl {
	MTK_VENDOR_ATTR_RFEATURE_CTRL_UNSPEC,

	MTK_VENDOR_ATTR_RFEATURE_CTRL_HE_GI,
	MTK_VENDOR_ATTR_RFEATURE_CTRL_HE_LTF,
	MTK_VENDOR_ATTR_RFEATURE_CTRL_TRIG_TYPE_CFG,
	MTK_VENDOR_ATTR_RFEATURE_CTRL_TRIG_TYPE_EN,
	MTK_VENDOR_ATTR_RFEATURE_CTRL_TRIG_TYPE,
	MTK_VENDOR_ATTR_RFEATURE_CTRL_ACK_PLCY,
	MTK_VENDOR_ATTR_RFEATURE_CTRL_TRIG_TXBF,
	MTK_VENDOR_ATTR_RFEATURE_CTRL_TRIG_VARIANT_TYPE,
	MTK_VENDOR_ATTR_RFEATURE_CTRL_CODING_TYPE,
	MTK_VENDOR_ATTR_RFEATURE_CTRL_LINK_ID,

	/* keep last */
	NUM_MTK_VENDOR_ATTRS_RFEATURE_CTRL,
	MTK_VENDOR_ATTR_RFEATURE_CTRL_MAX =
		NUM_MTK_VENDOR_ATTRS_RFEATURE_CTRL - 1
};

enum mtk_vendor_attr_mu_ctrl {
	MTK_VENDOR_ATTR_MU_CTRL_UNSPEC,

	MTK_VENDOR_ATTR_MU_CTRL_ONOFF,
	MTK_VENDOR_ATTR_MU_CTRL_DUMP,
	/**
	 * The above attrs are also used by connac 2. It is best not to modify the
	 * above data structure.
	 */
	MTK_VENDOR_ATTR_MU_CTRL_STRUCT,

	/* keep last */
	NUM_MTK_VENDOR_ATTRS_MU_CTRL,
	MTK_VENDOR_ATTR_MU_CTRL_MAX =
		NUM_MTK_VENDOR_ATTRS_MU_CTRL - 1
};

enum mtk_vendor_attr_ibf_ctrl {
	MTK_VENDOR_ATTR_IBF_CTRL_UNSPEC,

	MTK_VENDOR_ATTR_IBF_CTRL_ENABLE,

	/* keep last */
	NUM_MTK_VENDOR_ATTRS_IBF_CTRL,
	MTK_VENDOR_ATTR_IBF_CTRL_MAX =
		NUM_MTK_VENDOR_ATTRS_IBF_CTRL - 1
};

enum mtk_vendor_attr_ibf_dump {
	MTK_VENDOR_ATTR_IBF_DUMP_UNSPEC,

	MTK_VENDOR_ATTR_IBF_DUMP_ENABLE,

	/* keep last */
	NUM_MTK_VENDOR_ATTRS_IBF_DUMP,
	MTK_VENDOR_ATTR_IBF_DUMP_MAX =
		NUM_MTK_VENDOR_ATTRS_IBF_DUMP - 1
};

enum mtk_vendor_attr_bss_color_ctrl {
	MTK_VENDOR_ATTR_BSS_COLOR_CTRL_UNSPEC,

	MTK_VENDOR_ATTR_AVAL_BSS_COLOR_BMP,

	/* keep last */
	NUM_MTK_VENDOR_ATTRS_BSS_COLOR_CTRL,
	MTK_VENDOR_ATTR_BSS_COLOR_CTRL_MAX =
		NUM_MTK_VENDOR_ATTRS_BSS_COLOR_CTRL - 1
};

enum mtk_vendor_attr_background_radar_ctrl {
	MTK_VENDOR_ATTR_BACKGROUND_RADAR_CTRL_UNSPEC,

	MTK_VENDOR_ATTR_BACKGROUND_RADAR_CTRL_MODE,

	/* keep last */
	NUM_MTK_VENDOR_ATTRS_BACKGROUND_RADAR_CTRL,
	MTK_VENDOR_ATTR_BACKGROUND_RADAR_CTRL_MAX =
		NUM_MTK_VENDOR_ATTRS_BACKGROUND_RADAR_CTRL - 1
};

enum mtk_vendor_attr_pp_ctrl {
	MTK_VENDOR_ATTR_PP_CTRL_UNSPEC,

	MTK_VENDOR_ATTR_PP_MODE,

	/* keep last */
	NUM_MTK_VENDOR_ATTRS_PP_CTRL,
	MTK_VENDOR_ATTR_PP_CTRL_MAX =
		NUM_MTK_VENDOR_ATTRS_PP_CTRL - 1
};

enum mtk_vendor_attr_beacon_ctrl {
	MTK_VENDOR_ATTR_BEACON_CTRL_UNSPEC,

	MTK_VENDOR_ATTR_BEACON_CTRL_MODE,

	/* keep last */
	NUM_MTK_VENDOR_ATTRS_BEACON_CTRL,
	MTK_VENDOR_ATTR_BEACON_CTRL_MAX =
		NUM_MTK_VENDOR_ATTRS_BEACON_CTRL - 1
};

#define CSI_BW20_DATA_COUNT	64
#define CSI_BW40_DATA_COUNT	128
#define CSI_BW80_DATA_COUNT	256
#define CSI_BW160_DATA_COUNT	512
#define CSI_BW320_DATA_COUNT	1024
#define ETH_ALEN 6

struct csi_data {
	u8 ch_bw;
	u16 data_num;
	s16 data_i[CSI_BW320_DATA_COUNT];
	s16 data_q[CSI_BW320_DATA_COUNT];
	u8 band;
	s8 rssi;
	u8 snr;
	u32 ts;
	u8 data_bw;
	u8 pri_ch_idx;
	u8 ta[ETH_ALEN];
	u32 ext_info;
	u8 rx_mode;
	u32 chain_info;
	u16 tx_idx;
	u16 rx_idx;
	u32 segment_num;
	u8 remain_last;
	u16 pkt_sn;
	u8 tr_stream;
};

struct csi_resp_data {
	u16 usr_need_cnt;
	u16 buf_cnt;
	struct csi_data *csi_buf;
};

#define AIR_MONITOR_MAX_ENTRY 16

struct amnt_data {
	u8 idx;
	u8 addr[ETH_ALEN];
	s8 rssi[4];
	u32 last_seen;
};

struct amnt_resp_data {
	u8 sta_num;
	struct amnt_data resp_data[0];
};

enum {
	MU_CTRL_UPDATE,
	MU_CTRL_ONOFF,
};

struct connac3_muru_comm {
	u8 pda_pol;
	u8 band;
	u8 spe_idx;
	u8 proc_type;

	le16 mlo_ctrl;
	u8 sch_type;
	u8 ppdu_format;
	u8 ac;
	u8 _rsv[3];
};

struct connac3_muru_dl {
	u8 user_num;
	u8 tx_mode;
	u8 bw;
	u8 gi;

	u8 ltf;
	u8 mcs;
	u8 dcm;
	u8 cmprs;

	le16 ru[16];

	u8 c26[2];
	u8 ack_policy;
	u8 tx_power;

	le16 mu_ppdu_duration;
	u8 agc_disp_order;
	u8 _rsv1;

	u8 agc_disp_pol;
	u8 agc_disp_ratio;
	le16 agc_disp_linkMFG;

	le16 prmbl_punc_bmp;
	u8 _rsv2[2];

	struct {
		le16 wlan_idx;
		u8 ru_alloc_seg;
		u8 ru_idx;
		u8 ldpc;
		u8 nss;
		u8 mcs;
		u8 mu_group_idx;
		u8 vht_groud_id;
		u8 vht_up;
		u8 he_start_stream;
		u8 he_mu_spatial;
		le16 tx_power_alpha;
		u8 ack_policy;
		u8 ru_allo_ps160;
	} usr[16];
};

struct connac3_muru_ul {
	u8 user_num;
	u8 tx_mode;

	u8 ba_type;
	u8 _rsv;

	u8 bw;
	u8 gi_ltf;
	le16 ul_len;

	le16 trig_cnt;
	u8 pad;
	u8 trig_type;

	le16 trig_intv;
	u8 trig_ta[ETH_ALEN];
	le16 ul_ru[16];

	u8 c26[2];
	le16 agc_disp_linkMFG;

	u8 agc_disp_mu_len;
	u8 agc_disp_pol;
	u8 agc_disp_ratio;
	u8 agc_disp_pu_idx;

	struct {
		le16 wlan_idx;
		u8 ru_alloc_seg;
		u8 ru_idx;
		u8 ldpc;
		u8 nss;
		u8 mcs;
		u8 target_rssi;
		le32 trig_pkt_size;
		u8 ru_allo_ps160;
		u8 _rsv2[3];
	} usr[16];
};

struct connac3_muru_dbg {
	/* HE TB RX Debug */
	le32 rx_hetb_nonsf_en_bitmap;
	le32 rx_hetb_cfg[2];
};

struct connac3_muru {
	le32 cfg_comm;
	le32 cfg_dl;
	le32 cfg_ul;
	le32 cfg_dbg;

	struct connac3_muru_comm comm;
	struct connac3_muru_dl dl;
	struct connac3_muru_ul ul;
	struct connac3_muru_dbg dbg;
};

#define MURU_OFDMA_SCH_TYPE_DL	BIT(0)
#define MURU_OFDMA_SCH_TYPE_UL	BIT(1)
#define MURU_PPDU_HE_TRIG	BIT(2)
#define MURU_PPDU_HE_MU		BIT(3)

/* Common Config */
#define MURU_COMM_PPDU_FMT	BIT(0)
#define MURU_COMM_BAND		BIT(2)
#define MURU_COMM_WMM		BIT(3)
#define MURU_COMM_SPE_IDX	BIT(4)
#define MURU_COMM_SET		(MURU_COMM_PPDU_FMT | MURU_COMM_BAND | \
				 MURU_COMM_WMM | MURU_COMM_SPE_IDX)

/* DL Common config */
#define MURU_FIXED_DL_BW		BIT(0)
#define MURU_FIXED_DL_GI		BIT(1)
#define MURU_FIXED_DL_TONE_PLAN		BIT(3)
#define MURU_FIXED_DL_TOTAL_USER_CNT	BIT(4)
#define MURU_FIXED_DL_LTF		BIT(5)
#define MURU_FIXED_DL_ACK_PLY		BIT(9)

/* DL Per User Config */
#define MURU_FIXED_USER_DL_COD		BIT(17)
#define MURU_FIXED_USER_DL_MCS		BIT(18)
#define MURU_FIXED_USER_DL_RU_ALLOC	BIT(20)

/* UL Common Config */
#define MURU_FIXED_UL_TOTAL_USER_CNT	BIT(4)
#define MURU_FIXED_UL_BW		BIT(5)
#define MURU_FIXED_UL_GILTF		BIT(6)

/* UL Per User Config */
#define MURU_FIXED_USER_UL_COD		BIT(18)
#define MURU_FIXED_USER_UL_MCS		BIT(19)
#define MURU_FIXED_USER_UL_NSS		BIT(20)
#define MURU_FIXED_USER_UL_RU_ALLOC	BIT(21)

#endif /* MTK_VENDOR_H */
